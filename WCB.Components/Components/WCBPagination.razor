@using Microsoft.AspNetCore.Components
@using WCB.Components.Services.WCBPagination
@inject WCBPaginationService PaginationService

<nav aria-label="Page navigation" class="mt-3">
    <ul class="pagination justify-content-center mb-0 flex-wrap">

        <!-- Eerste pagina knop -->
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="() => ChangePage(1)" aria-label="First">
                <span aria-hidden="true">&laquo;&laquo;</span>
            </button>
        </li>

        <!-- Vorige knop -->
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" onclick="@(() => ChangePage(CurrentPage - 1))" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </button>
        </li>

        <!-- Start ellips -->
        @if (ShouldShowEllipsisStart())
        {
            <li class="page-item">
                <button class="page-link" onclick="@(() => ChangePage(1))">1</button>
            </li>
            <li class="page-item disabled">
                <span class="page-link">…</span>
            </li>
        }

        <!-- Pagina knoppen -->
        @foreach (var pageNumber  in GetVisiblePages())
        {
            <li class="page-item @(pageNumber == CurrentPage ? "active" : "")">
                <button class="page-link" onclick="@(() => ChangePage(pageNumber))">@pageNumber</button>
            </li>
        }

        <!-- Eind ellips -->
        @if (ShouldShowEllipsisEnd())
        {
            <li class="page-item disabled">
                <span class="page-link">…</span>
            </li>
            <li class="page-item">
                <button class="page-link" onclick="@(() => ChangePage(TotalPages))">@TotalPages</button>
            </li>
        }

        <!-- Volgende knop -->
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" onclick="@(() => ChangePage(CurrentPage + 1))" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </button>
        </li>

        <!-- Laatste pagina knop -->
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" onclick="@(() => ChangePage(TotalPages))" aria-label="Last">
                <span aria-hidden="true">&raquo;&raquo;</span>
            </button>
        </li>
    </ul>
</nav>

@code {
    [Parameter] public string ListId { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public int MaxVisiblePages { get; set; } = 5;
    [Parameter] public bool CompactMode { get; set; } = false;

    private int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);

    protected override void OnInitialized()
    {
        PaginationService.OnPageChanged += HandleExternalPageChange;
    }

    private async void HandleExternalPageChange(string listId, int page)
    {
        if (listId != ListId) return;
        CurrentPage = page;
        await OnPageChanged.InvokeAsync(page);
        StateHasChanged();
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > TotalPages) return;
        CurrentPage = page;

        // Meld lokaal
        await OnPageChanged.InvokeAsync(page);

        // Meld via service
        PaginationService.SetPage(ListId, page);
    }

    private IEnumerable<int> GetVisiblePages()
    {
        int maxPages = CompactMode ? Math.Min(MaxVisiblePages, 3) : MaxVisiblePages;
        int half = maxPages / 2;

        int start = Math.Max(1, CurrentPage - half);
        int end = Math.Min(TotalPages, start + maxPages - 1);

        if (end - start + 1 < maxPages)
        {
            start = Math.Max(1, end - maxPages + 1);
        }

        return Enumerable.Range(start, end - start + 1);
    }

    private bool ShouldShowEllipsisStart()
    {
        var visible = GetVisiblePages().ToList();
        return visible.First() > 2;
    }

    private bool ShouldShowEllipsisEnd()
    {
        var visible = GetVisiblePages().ToList();
        return visible.Last() < TotalPages - 1;
    }
}
