@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.CodeAnalysis
@using System.Globalization

@typeparam TKey where TKey : notnull
@typeparam TValue

@inherits InputBase<TKey>

<select class="form-select form-control"
        value="@CurrentValueAsString"
        onchange="@OnChangeHandler">

    @if (ShowPrompt)
    {
        <option value="">@PromptText</option>
    }

    @foreach (var item in DataSource)
    {
        <option value="@Convert.ToString(item.Key, CultureInfo.InvariantCulture)">
            @item.Value
        </option>
    }
</select>

@code {
    /// <summary>
    /// De data als Dictionary (Key = waarde die we binden, Value = label in dropdown)
    /// </summary>
    [Parameter, EditorRequired]
    public Dictionary<TKey, TValue> DataSource { get; set; } = new();

    /// <summary>
    /// Tekst bovenaan in de dropdown (optioneel)
    /// </summary>
    [Parameter]
    public string? PromptText { get; set; } = "--- Selecteer ---";

    /// <summary>
    /// Bepaal of we de extra prompt <option value=""> moeten tonen
    /// </summary>
    private bool ShowPrompt
    {
        get
        {
            if (PromptText is null)
                return false;

            try
            {
                var defaultKey = default(TKey);

                // Vermijd ContainsKey(null) als dat niet is toegestaan
                if (defaultKey is null)
                    return true;

                return !DataSource.ContainsKey(defaultKey);
            }
            catch
            {
                // Fallback voor types die default niet als key toelaten
                return true;
            }
        }
    }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TKey result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (typeof(TKey) == typeof(string))
        {
            result = (TKey)(object)(value ?? "");
            validationErrorMessage = null;
            return true;
        }

        if (string.IsNullOrWhiteSpace(value))
        {
            result = default!;
            validationErrorMessage = $"Selecteer een geldige waarde voor {typeof(TKey).Name}";
            return false;
        }

        if (BindConverter.TryConvertTo<TKey>(value, CultureInfo.InvariantCulture, out var parsed))
        {
            result = parsed;
            validationErrorMessage = null;
            return true;
        }

        result = default!;
        validationErrorMessage = $"Ongeldige selectie voor type {typeof(TKey).Name}";
        return false;
    }

    private void OnChangeHandler(ChangeEventArgs e)
    {
        if (TryParseValueFromString(e?.Value?.ToString(), out var parsedValue, out _))
        {
            CurrentValue = parsedValue;
        }
    }
}
