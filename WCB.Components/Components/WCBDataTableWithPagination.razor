@typeparam TItem

<div>
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                @foreach (var column in Columns)
                {
                    <th style="@(column.SortKeySelector != null ? "cursor:pointer" : "color:#f5f5f5")"
                        onclick="@(column.SortKeySelector != null?() => SortByColumn(column):null)">
                        @column.Header
                        @if (SortedColumn == column)
                        {
                            <span style="color: white; margin-left: 5px;">
                                <i class="bi @(SortAscending ? "bi-caret-up-fill" : "bi-caret-down-fill")"></i>
                            </span>
                        }
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @if (PagedItems.Any())
            {
                @foreach (var item in PagedItems)
                {
                    <tr>
                        @foreach (var column in Columns)
                        {
                            <td>@column.CellTemplate(item)</td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="@Columns.Count" class="text-center text-muted">
                        Geen gegevens beschikbaar
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <WCBPagination TotalItems="Items.Count()" PageSize="PageSize" CurrentPage="@CurrentPage" OnPageChanged="ChangePage" />
</div>

@code {
    [Parameter] public List<TItem> Items { get; set; } = new();
    [Parameter] public List<ColumnDefinition<TItem>> Columns { get; set; } = new();
    [Parameter] public int PageSize { get; set; } = 5;

    private int CurrentPage { get; set; } = 1;
    private ColumnDefinition<TItem>? SortedColumn { get; set; }
    private bool SortAscending { get; set; } = true;

    private IEnumerable<TItem> SortedItems =>
        SortedColumn?.SortKeySelector == null
            ? Items
            : SortAscending
                ? Items.OrderBy(SortedColumn.SortKeySelector)
                : Items.OrderByDescending(SortedColumn.SortKeySelector);

    private IEnumerable<TItem> PagedItems =>
        SortedItems.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

    private void ChangePage(int newPage)
    {
        CurrentPage = newPage;
    }

    private void SortByColumn(ColumnDefinition<TItem> column)
    {
        if (SortedColumn == column)
        {
            SortAscending = !SortAscending;
        }
        else
        {
            SortedColumn = column;
            SortAscending = true;
        }

        CurrentPage = 1;
        StateHasChanged();
    }
}
